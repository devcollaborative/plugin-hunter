#!/usr/bin/env php
<?php

$step_number = 0; // For the step counter display.

$site_list = []; // Stores the initial set of all the user's pantheon sites.
$filtered_sites= []; // Filtered sites based on frozen status and version parameter
$results = []; // Stores the subset of fitlered sites that have the designated module
$error_sites = []; // Stores the subset of filtered sites where the module check failed.

// Color codes
$red = "\e[0;31m";
$green = "\e[0;32m";

/**
 * display_step()
 * Outputs a numbered description of the current step,
 * e.g. "1.) Checking for foo"
 *
 * @param [string] $step_description Deascription of the step
 *
 */
function display_step ($step_description) {
  global $step_number;
  $step_number += 1;
  echo $step_number . ') ' . $step_description;
  echo "\n";
}

/**
 * color_output()
 *
 * @param [string] $color color to use in shading the text.
 * @param [string] $text Text to color code.
 * @return void
 */
function color_output($color, $text) {
  return $color . $text . "\033[0m";
}

$modules = $argv;
array_shift($modules);  //drop the first argument (script name)

// Read in and validate command line arguments
if (!empty($modules)) {
  $response = "Searching for installed instances of the following modules: "
    . implode(', ', $modules);

} else {
  echo color_output($red, "Syntax error:") .  " module-hunt [module_name] \n";
  exit;
}

echo $response . "\n";

display_step('Getting list of pantheon sites.');
$site_list = json_decode(shell_exec('terminus site:list --format=json --fields="name,framework,plan_name,frozen"'));

display_step('Filtering to relevant set of sites');
foreach($site_list as $site) {
  if ($site->framework == "drupal8"
  && !$site->frozen) {
    $filtered_sites[] = $site;
  }
}

if (empty($filtered_sites)) {
  echo color_output($red, "Sorry, no sites matching your Drupal version parameters found\n");
  exit;
} else {
  echo "Found " . count($filtered_sites) . " sites.\n";
}

display_step("Checking each site for the designated module(s).");
// Check for Sanbox sites -- dev instance should be evaluated for them, since
// there is no live.
foreach($filtered_sites as $site) {
  $env = 'live';
  echo "Checking $site->name:\n";
  if ($site->plan_name == "Sandbox") {
    $env = 'dev';
  }

  // Gets array of all active modules.
  $active_modules = explode("\n", shell_exec("terminus drush $site->name.$env -- pml --status=enabled --format=string --field=name"));

  // An inability to get the module result will result in ["0" => ""]
  if (!empty($active_modules[0])) {
    // check the array for the target module.
    foreach ($modules as $module) {
      if (array_search($module, $active_modules)) {
        echo color_output($green, "$module FOUND.\n");
        $results[$module][] = $site->name;
      } else {
        echo "$module not found. \n";
      }
    }
  } else {
    echo color_output($red, "Error getting module data:\n");
    $error_sites[] = $site->name;
  }
}

// Report all sites with the target module installed.
if (!empty($results)) {
  echo color_output($green, "\n\n\nSUMMARY:\n");
  foreach($results as $module => $module_results) {
    echo color_output($green, "\n$module appears on the following sites:\n");
    echo implode(',', $module_results) . "\n";
  }

  echo("\n");
}

// Report all sites where the module list could not be obtained.
if (!empty($error_sites)) {
  echo color_output($red, "\n\nNOTICE: There was a problem checking the following sites:\n");
  echo implode(',', $error_sites) . "\n";
}
